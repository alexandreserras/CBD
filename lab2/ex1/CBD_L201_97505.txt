MongoDB é uma base de dados orientada a documentos representados numa estrutura
JSON (internamente usa BSON, uma versão binária de JSON).

"Why Use MongoDB?
Document Oriented Storage − Data is stored in the form of JSON style documents.
Index on any attribute,Replication and high availability,Auto-Sharding,Rich queries,Fast in-place updates,Professional support by MongoDB
Where to Use MongoDB?
Big Data,Content Management and Delivery,Mobile and Social Infrastructure,User Data Management,Data Hub"
https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ -> link para instalar

-> sudo systemctl start mongod , meter o mongo a correr
-> sudo systemctl status mongod , ver como esta o mongo
-> sudo systemctl stop mongod , parar o mongo
-> sudo systemctl restart mongod , restart ao mongo

https://docs.mongodb.com/compass/current/install/ -> instalação do compass


mongodb-compass -> comando para correr o compass , muitos problemas instalar o Robo 3T

Estrutura de armazenamento :
    DB-> Base de dados é um container fisico para coleções.
Cada base de dados tem o seu próprio conjunto de ficheiros no file systemctl
    Um server mongoDb normalmente tem varias base de dados

    Collection-> Collection é um grupo de documentos MongoDb.
    É o equivalente a uma tabela RDBMS, são as tabelas do SQL.
    Uma coleção existe dentro de uma única base de dados.
    Coleções não impõe um schema.
    Os documentos dentro de coleções podem ter diferentes campos, regra geral
    todos os documentos numa coleção são semelhantes ou tem um propósito semelhantes

    Document-> É um conjunto de pares chave/valor. Tem um schema dinâmico.
    Schema dinâmicos significa que os documentos na mesma coleção não precisam de ter o mesmo conjunto de campos ou estrutura
    e os campos comuns nas coleções de documentos podem ter diferente tipos de data.

JSON :
    "In MongoDB, data is stored as documents. 
    These documents are stored in MongoDB in JSON (JavaScript Object Notation) format. 
    JSON documents support embedded fields, so related data and lists of data can be stored
    with the document instead of an external table.
    JSON is formatted as name/value pairs."

JavaScript:
    "Which database is best for JavaScript?
Node.js supports all kinds of databases no matter if it is a relational database or NoSQL database. 
However, NoSQL databases like MongoDb are the best fit with Node.js."
    "The MongoDB shell is an interactive JavaScript shell. 
    As such, it provides the capability to use JavaScript code directly in the shell or executed as a standalone JavaScript file. 
    Subsequent hours that deal with using the shell to access the database and 
    create and manipulate collections and documents provide examples that are written in JavaScript."

    "Each individual command is evaluated over exactly one
    collection
        – Queries return a cursor
    Allows us to iterate over all the selected documents"

O que é o CRUD:
    Create: Criar um documento, comandos: db.COLLECTION_NAME.insert(document) (não usar),db.COLLECTION_NAME.insertMany(documentos)
db.COLLECTION_NAME.insertOne(document)
    Read:   Ler um documento : db.COLLECTION_NAME.find()
    Update: Atualizar um documento : db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)
    Delete: Apagar um documento

A chave primária num documento é sempre _chave, quando não colocamos nada ele por omissão cria o _id 
que fica a ser a chave primária do documento.
O insert não pode ser usado para alterar o documento 

Mais funcionalidades do find:
    find({}, {}) -> o 1º {} serve para colocarmos la pelo que queremos pesquisar
                    O 2ª {} serve para  filtrar aquilo que queremos receber 
                como o id vem sempre atras para não o recebermos temos de colocar {... , _id:0}
                e os que queremos receber temos que colocar nome_do_campo :1
    
Seletores:
    Comparação :
        - $eq, $ne  -> equals e o not equals
        - $lt, $lte, $gte,$gt -> menor, menor ou igual, maior ou igual, maior
        - $in -> igual a pelo menos 1 dos valores dados 
        - $nin -> negação do in

    Logicos:
        - $and , $or 
        - $nor -> retorna todos os documentos que falhem ambas as clausulas
        - $not 
    Element operators:
        - $exists -> testa se um dado campo existe ou não 
        - $type -> seleciona documento , se o campo for de um determinado tipos
    Evaluation operators:
        - $regex -> testa se o passado no campo corresponde à expressão regular
        - $text -> faz procura de texto

    

Data Types:
    O mongoDb é compativel com strings, integer, boolean, double, Min/Max keys (This type is used to compare a value against the lowest and highest BSON elements.)
Arrays:
    "This type is used to store arrays or list or multiple values into one key." e depois 
    em vez de guardar apenas um valor posso guardar vários valores, através de um array.
    
    Opeações com arrays:
        $all -> Corresponde aos arrays que contêm todos os elementos especificados na query
        $elemMatch-> Seleciona documentos, se um elemento do array corresponder a todos as condições pedidas
        $size -> Seleciona documentos , se o campo do array tiver um dado tamanho

Modifiers :
    Sort -> Ordenard o array
    limit -> retorna no máximo o numero que indicarmos
    skip -> serve para saltar o numero indicado

Indices:
    "Indexes support the efficient resolution of queries.
     Without indexes, MongoDB must scan every document of a collection to select those documents that match the query statement. 
     This scan is highly inefficient and require MongoDB to process a large volume of data.
    Indexes are special data structures, that store a small portion of the data set in an easy-to-traverse form. 
    The index stores the value of a specific field or set of fields, 
    ordered by the value of the field as specified in the index."
    Contudo só compensa termos indices quando temos uma quantidade de dados bastante grande 

    Quando colocamos na criação do indice <key> : 1/-1 :
        O 1 significa ordem ascendente 
        O -1 significa ordem descendente
    
    Temos vários tipos de indices desde:
        Simples -> Tem apenas 1 campo
        Compound -> tem varios campos
        Multikey -> Um campo que possui um array, indice é pelo array
        
        Text  - nao vamos usar 
        Hashed - nao vamos usar 
        Geospatial  - nao vamos usar 

Agregation:
    O documento entra numa multi-fase em pipeline, tipo o count e sum  em SQL, que transforma o documento num 
    agregado de resultados

    Funções usadas no agregado:
        sum
        avg
        Min
        Max
        push
        first
        addToSet
        last

    Map Reduces:
        Paradigma que é util para um conjunto muito grande de dados, logo util quando precisamos
        de fazer agregados de grupos enormes
        Temos 2 partes:
            Map -> indicamos  com o emit onde vamos mexer e em que campos
            Reduces -> É a parte onde os documentos com as mesmas caracteristicas são juntos, e dizemos o que pretendemos


        query:  -> query que vamos fazer
        output  -> o nome da coleção
        
            
Comandos Mongo :
    use <nome_base_dados> -> vamos para a base de dados que pretendemos, caso ainda não exista o mongo vai criar
    db.createCollection(<nome_col>) -> criar uma coleção
    db.COLLECTION_NAME.drop()-> apagar coleção
    db.COLLECTION_NAME.insertOne(doc) -> inserir um documento 
    db.COLLECTION_NAME.insertMany(doc) -> inserir muitos documentos
    db.COLLECTION_NAME.find(args) -> procurar por um documento
    db.COLLECTION_NAME.updateMany(SELECTION_CRITERIA, UPDATED_DATA)  -> comando para alterar  documentos
    db.COLLECTION_NAME.updateOne(SELECTIOIN_CRITERIA, UPDATED_DATA) -> serve para atualizar apenas 1
    db.COLLECTION_NAME.remove(DELLETION_CRITTERIA) -> vai apagar todos os que se enquadrem no criterio
    db.COLLECTION_NAME.remove(DELETION_CRITERIA,1) -> apaga apenas 1 dos que se enquadram no criterio

    db.mycol.remove({}) -> apaga todos os documentos
    Mas o mongo sugere o delete em vez do remove, com o deleteOne, deleteMany
    logo 
    db.COLLECTION_NAME.deleteOne(DELLETION_CRITTERIA)
    db.COLLECTION_NAME.deleteMany(DELLETION_CRITTERIA)
    db.COLLECTION_NAME.createIndex({KEY:1}) -> criar Indices   
    db.COLLECTION_NAME.dropIndex({KEY:1}) -> apaga o indice dado
    db.COLLECTION_NAME.dropIndexes() -> apaga todos os indices
    db.COLLECTION_NAME.getIndexes() -> obter os indices
    db.COLLECTION_NAME.aggregate([{match state}, {group state }])
    db.COLLECTION_NAME.mapReduce(function () {} function(key,values) {} { query : {},out : })


Comandos usados e respostas do mongo:
    test> use mydb
    switched to db mydb
    mydb> show dbs
    admin     41 kB
    config  49.2 kB
    local     41 kB
    mydb> db.createCollection("post")
    { ok: 1 }
    mydb> db.users.insert({
    ...  _id : ObjectId("507f191e810c19729de860ea"),
    ...  title: "MongoDB Overview",
    ...  description: "MongoDB is no sql database",
    ...  by: "tutorials point",
    ...  url: "http://www.tutorialspoint.com",
    ...  tags: ['mongodb', 'database', 'NoSQL'],
    ...  likes: 100
    ...  })
    DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
    {
    acknowledged: true,
    insertedIds: { '0': ObjectId("507f191e810c19729de860ea") }
    }
    mydb> db.users.find()
    [
    {
        _id: ObjectId("507f191e810c19729de860ea"),
        title: 'MongoDB Overview',
        description: 'MongoDB is no sql database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    }
    ]   
     db.post.insert([
    ... 	{
    ..... 		title: "MongoDB Overview",
    ..... 		description: "MongoDB is no SQL database",
    ..... 		by: "tutorials point",
    ..... 		url: "http://www.tutorialspoint.com",
    ..... 		tags: ["mongodb", "database", "NoSQL"],
    ..... 		likes: 100
    ..... 	},
    ... 	{
    ..... 	title: "NoSQL Database",
    ..... 	description: "NoSQL database doesn't have tables",
    ..... 	by: "tutorials point",
    ..... 	url: "http://www.tutorialspoint.com",
    ..... 	tags: ["mongodb", "database", "NoSQL"],
    ..... 	likes: 20,
    ..... 	comments: [
    ..... 		{
    ....... 			user:"user1",
    ....... 			message: "My first comment",
    ....... 			dateCreated: new Date(2013,11,10,2,35),
    ....... 			like: 0
    ....... 		}
    ..... 	]
    ..... }
    ... ])
    {
    acknowledged: true,
    insertedIds: {
        '0': ObjectId("617a6c6b91c5c28dc3a705a5"),
        '1': ObjectId("617a6c6b91c5c28dc3a705a6")
    }
    }
    mydb> db.post.find({title: "NoSQL Database"})
    [
    {
        _id: ObjectId("617a6c6b91c5c28dc3a705a6"),
        title: 'NoSQL Database',
        description: "NoSQL database doesn't have tables",
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 20,
        comments: [
        {
            user: 'user1',
            message: 'My first comment',
            dateCreated: ISODate("2013-12-10T02:35:00.000Z"),
            like: 0
        }
        ]
    }
    ]
    mydb> db.post.find({title: "NoSQL Database"}, {title})
    ReferenceError: title is not defined
    mydb> db.post.find({title: "NoSQL Database"}, {title:1 })
    [
    {
        _id: ObjectId("617a6c6b91c5c28dc3a705a6"),
        title: 'NoSQL Database'
    }
    ]
    mydb> db.post.find({title: "NoSQL Database"}, {title:1, _id : 0 })
    [ { title: 'NoSQL Database' } ]
    mydb> db.post.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
    DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
    {
    acknowledged: true,
    insertedId: null,
    matchedCount: 1,
    modifiedCount: 1,
    upsertedCount: 0
    }
    db.post.remove({'title':'MongoDB Overview'})
    DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.
    { acknowledged: true, deletedCount: 0 }

    db.testes.insertMany( [{ nome : "Alex", idade : 21 }, { nome : "Ricardo", idade: 20 }, {nome : "Artur" , idade : 20 } , { nome : "Reis" , idade :5}]);
    {
    acknowledged: true,
    insertedIds: {
        '0': ObjectId("617c0923ac8de9d047e8980f"),
        '1': ObjectId("617c0923ac8de9d047e89810"),
        '2': ObjectId("617c0923ac8de9d047e89811"),
        '3': ObjectId("617c0923ac8de9d047e89812")
    }
    }
    mydb> db.testes.find( { idade : 21 })
    [
    {
        _id: ObjectId("617c0923ac8de9d047e8980f"),
        nome: 'Alex',
        idade: 21
    },
    mydb> db.testes.find({idade:  { $lt  : 21 }})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e89810"),
        nome: 'Ricardo',
        idade: 20
    },
    {
        _id: ObjectId("617c0923ac8de9d047e89811"),
        nome: 'Artur',
        idade: 20
    },
    { _id: ObjectId("617c0923ac8de9d047e89812"), nome: 'Reis', idade: 5 },
    {
      mydb> db.testes.find({idade:  { $eq  : 21 }})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e8980f"),
        nome: 'Alex',
        idade: 21
    }
    mydb> db.testes.find({idade:  { $in   : [5,21] }})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e8980f"),
        nome: 'Alex',
        idade: 21
    },
    { _id: ObjectId("617c0923ac8de9d047e89812"), nome: 'Reis', idade: 5 },

    mydb> db.testes.find({idade:  { $nin   : [5,21] }})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e89810"),
        nome: 'Ricardo',
        idade: 20
    },
    {
        _id: ObjectId("617c0923ac8de9d047e89811"),
        nome: 'Artur',
        idade: 20
    }
    mydb> db.testes.find({$or :[  {idade : 21    }, {nome:"Ricardo"}]})
[
  {
    _id: ObjectId("617c0923ac8de9d047e8980f"),
    nome: 'Alex',
    idade: 21
  },
  {
    _id: ObjectId("617c0923ac8de9d047e89810"),
    nome: 'Ricardo',
    idade: 20
  }
  mydb> db.testes.find({ nome : { $exists: true, $nin: ["Alex","Ricardo"]}})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e89811"),
        nome: 'Artur',
        idade: 20
    },
    { _id: ObjectId("617c0923ac8de9d047e89812"), nome: 'Reis', idade: 5 }

        mydb> db.testes.find({ nome : /A/})
    [
    {
        _id: ObjectId("617c0923ac8de9d047e8980f"),
        nome: 'Alex',
        idade: 21
    },
    {
        _id: ObjectId("617c0923ac8de9d047e89811"),
        nome: 'Artur',
        idade: 20
    }
        mydb> db.inventory.insertMany([
    ...    { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] }, 
    ...    { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
    ...    { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
    ...    { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
    ...    { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
    ... ]);
    {
    acknowledged: true,
    insertedIds: {
        '0': ObjectId("617c0c9229d602973f2155cc"),
        '1': ObjectId("617c0c9229d602973f2155cd"),
        '2': ObjectId("617c0c9229d602973f2155ce"),
        '3': ObjectId("617c0c9229d602973f2155cf"),
        '4': ObjectId("617c0c9229d602973f2155d0")
    }
    }   
    mydb> db.inventory.find( { tags: ["red", "blank"] } )
    [
    {
        _id: ObjectId("617c0c9229d602973f2155cd"),
        item: 'notebook',
        qty: 50,
        tags: [ 'red', 'blank' ],
        dim_cm: [ 14, 21 ]
    }
    ]
    mydb> db.inventory.find( { tags: { $all: ["red", "blank"] } } )
    [
    {
        _id: ObjectId("617c0c9229d602973f2155cc"),
        item: 'journal',
        qty: 25,
        tags: [ 'blank', 'red' ],
        dim_cm: [ 14, 21 ]
    },
    {
        _id: ObjectId("617c0c9229d602973f2155cd"),
        item: 'notebook',
        qty: 50,
        tags: [ 'red', 'blank' ],
        dim_cm: [ 14, 21 ]
    },
    {
        _id: ObjectId("617c0c9229d602973f2155ce"),
        item: 'paper',
        qty: 100,
        tags: [ 'red', 'blank', 'plain' ],
        dim_cm: [ 14, 21 ]
    },
    {
        _id: ObjectId("617c0c9229d602973f2155cf"),
        item: 'planner',
        qty: 75,
        tags: [ 'blank', 'red' ],
        dim_cm: [ 22.85, 30 ]
    }
    ]
    mydb> db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )
    [
    {
        _id: ObjectId("617c0c9229d602973f2155cf"),
        item: 'planner',
        qty: 75,
        tags: [ 'blank', 'red' ],
        dim_cm: [ 22.85, 30 ]
    }
    ]
    mydb> db.inventory.find( { "tags": { $size: 3 } } )
    [
    {
        _id: ObjectId("617c0c9229d602973f2155ce"),
        item: 'paper',
        qty: 100,
        tags: [ 'red', 'blank', 'plain' ],
        dim_cm: [ 14, 21 ]
    }
    ]



Nota interessante: Quando é utilizado o insert recebemos um warning que não convêm utilizar o insert, devemos
utilizar insertOne ou insertMany.

No 2 usar o mongo compasss ou robo3D, pois vais começar a facilitar mas antes usar apenas a shell

Evidencias -> find *  -> quando temos muitos resultados não é preciso colocar tudo
mais de 5/6 já começa a ser muito basta por alguns, para o ex2



